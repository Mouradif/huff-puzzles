/**
 *  BASIC_BANK HUFF EXERCISE
 *
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload 0xe0 shr
  dup1 __FUNC_SIG(balanceOf) eq read_balance jumpi
  __FUNC_SIG(withdraw) eq withdraw jumpi
  caller sload
  callvalue add
  caller sstore
  stop

  read_balance:
    READ_BALANCE()

  withdraw:
    WITHDRAW()
}

#define macro READ_BALANCE() = takes(0) returns(0) {
  0x04 calldataload
  sload
  0x00 mstore
  0x20 0x00 return
}

#define macro WITHDRAW() = takes(0) returns(0) {
  caller sload                // [balance]
  0x04 calldataload           // [amount, balance]
  dup2                        // [balance, amount, balance]
  dup2                        // [amount, balance, amount, balance]
  gt                          // [amount > balance, amount, balance]
  not_enough_balance jumpi    // [amount, balance]
  dup1                        // [amount, amount, balance]
  swap2                       // [balance, amount, amount]
  sub                         // [balance - amount, amount]
  caller sstore               // [amount]
  0x00 0x00 0x00 0x00         // [retSize, argsOffset, argsSize, retOffset, amount]
  swap4                       // [amount, argsOffset, argsSize, retOffset, retSize]
  caller gas call             // []
  stop

  not_enough_balance:
    0x00 0x00 revert
}
