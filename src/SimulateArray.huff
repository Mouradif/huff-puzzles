/**
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can;
 *      - Push numbers onto a array,
 *      - Pop the last index from the array,
 *      - View what's stored at an index,
 *      - Gets the length of the array,
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert.
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function pushh(uint256 num) payable returns()
#define function popp() payable returns()
#define function read(uint256 index) payable returns(uint256)
#define function length() payable returns(uint256)
#define function write(uint256 index, uint256 num) payable returns()

#define error OutOfBounds()
#define error ZeroArray()

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload 0xe0 shr
  dup1 __FUNC_SIG(pushh) eq pushh jumpi
  dup1 __FUNC_SIG(popp) eq popp jumpi
  dup1 __FUNC_SIG(read) eq read jumpi
  dup1 __FUNC_SIG(length) eq length jumpi
  __FUNC_SIG(write) eq write jumpi
  0x00 0x00 revert

  pushh:
    PUSHH()

  popp:
    POPP()

  read:
    READ()

  length:
    LENGTH()

  write:
    WRITE()

  out_of_bounds:
    __ERROR("OutOfBounds()") 0x00 mstore
    0x04 0x1c revert

  zero_array:
    __ERROR("ZeroArray()") 0x00 mstore
    0x04 0x1c revert
}

#define macro PUSHH() = takes(0) returns(0) {
  0x04 calldataload                   // [num]
  0x00 sload 0x01 add                 // [new_length, num]
  dup1                                // [new_length, new_length, num]
  0x00 sstore sstore
  stop
}

#define macro POPP() = takes(0) returns(0) {
  0x01 0x00 sload
  dup1 iszero zero_array jumpi
  dup1 sload 0x00 mstore
  sub 0x00 sstore
  0x20 0x00 return
}

#define macro READ() = takes(0) returns(0) {
  0x04 calldataload 0x01 add
  0x00 sload
  dup2 gt out_of_bounds jumpi
  sload 0x00 mstore
  0x20 0x00 return
}

#define macro LENGTH() = takes(0) returns(0) {
  0x00 sload 0x00 mstore
  0x20 0x00 return
}

#define macro WRITE() = takes(0) returns(0) {
  0x04 calldataload 0x01 add
  0x00 sload
  dup2 gt out_of_bounds jumpi
  0x24 calldataload
  swap1 sstore
  stop
}
